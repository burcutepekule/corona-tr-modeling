)
table_neg_temp = table_neg;
# for (i in seq(1,dim(table_pos)[1])){
for (i in seq(1,1)){
print(i)
patient_pos = table_pos[i,];
pos_id      = patient_pos$id;
diff_table_temp <- tibble(
pos_id = numeric(),
neg_id = numeric(),
cd4Diff = numeric(),
sexDiff = numeric(),
ethnicityDiff = numeric(),
totalDiff     = numeric()
)
for(k in seq(1,dim(table_neg_temp)[1])){
candidate_neg   = table_neg_temp[k,];
neg_id          = candidate_neg$id;
cd4Diff         = abs(candidate_neg$cd4-patient_pos$cd4);
sexDiff         = abs(candidate_neg$sex-patient_pos$sex);
ethnicityDiff   = abs(candidate_neg$ethnicity-patient_pos$ethnicity);
diff_table_temp = diff_table_temp %>% add_row(pos_id,neg_id,cd4Diff,sexDiff,ethnicityDiff)
}
diff_table_temp$cd4Diff   = diff_table_temp$cd4Diff/max(diff_table_temp$cd4Diff);
diff_table_temp$totalDiff = 100*diff_table_temp$cd4Diff+10*diff_table_temp$sexDiff+1*diff_table_temp$ethnicityDiff;
# new_row        = diff_table_temp[which.min(diff_table_temp$totalDiff),];
# rows_to_remove = which(table_neg_temp$id == diff_table_temp$neg_id);
# table_neg_temp = table_neg_temp[!rows_to_remove,];
# print(dim(table_neg_temp)[1])
diff_table     = bind_rows(diff_table,diff_table_temp[which.min(diff_table_temp$totalDiff),])
}
saveRDS(diff_table, "diff_table.rds")
# diff_table_unq = distinct(diff_table)
# dim(distinct(diff_table))[1]
# length(unique(table_pos$id))
comp_table_A = tibble(
pos_id  = numeric(),
neg_id  = numeric(),
pos_cd4 = numeric(),
neg_cd4 = numeric(),
pos_sex = numeric(),
neg_sex = numeric(),
pos_eth = numeric(),
neg_eth = numeric()
)
for (i in seq(1,dim(diff_table)[1])){
pos_id  = diff_table[i,]$pos_id;
neg_id  = diff_table[i,]$neg_id;
pos_cd4 = table_pos[which(table_pos$id==pos_id),]$cd4
neg_cd4 = table_neg[which(table_neg$id==neg_id),]$cd4
pos_sex = table_pos[which(table_pos$id==pos_id),]$sex
neg_sex = table_neg[which(table_neg$id==neg_id),]$sex
pos_eth = table_pos[which(table_pos$id==pos_id),]$ethnicity
neg_eth = table_neg[which(table_neg$id==neg_id),]$ethnicity
comp_table_A  = comp_table_A %>% add_row(pos_id,neg_id,pos_cd4,neg_cd4,pos_sex,neg_sex,pos_eth,neg_eth)
}
saveRDS(comp_table_A, "comp_table_A.rds")
# FILTER EVEN FURTHER - GET THE ONES WITH ONLY SAME SEX AND ETHNICITY
comp_table_B = tibble(
pos_id  = numeric(),
neg_id  = numeric(),
pos_cd4 = numeric(),
neg_cd4 = numeric(),
pos_sex = numeric(),
neg_sex = numeric(),
pos_eth = numeric(),
neg_eth = numeric()
)
for (i in seq(1,dim(comp_table_A)[1])){
pos_id  = comp_table_A[i,]$pos_id;
neg_id  = comp_table_A[i,]$neg_id;
pos_cd4 = comp_table_A[i,]$pos_cd4;
neg_cd4 = comp_table_A[i,]$neg_cd4;
pos_sex = comp_table_A[i,]$pos_sex;
neg_sex = comp_table_A[i,]$neg_sex;
pos_eth = comp_table_A[i,]$pos_eth;
neg_eth = comp_table_A[i,]$neg_eth;
if(pos_sex==neg_sex & pos_eth==neg_eth){
comp_table_B  = comp_table_B %>% add_row(pos_id,neg_id,pos_cd4,neg_cd4,pos_sex,neg_sex,pos_eth,neg_eth)
}
}
saveRDS(comp_table_B, "comp_table_B.rds")
#GET ONLY THE WHITES (ETHNICITY = 1)
comp_table_C = comp_table_B %>% filter(pos_eth==1)
saveRDS(comp_table_C, "comp_table_C.rds")
num_males   = sum((comp_table_C$pos_sex==1)==TRUE)
num_females = sum((comp_table_C$pos_sex==2)==TRUE)
pos_samples_all = table_pos[which(table_pos$id %in% comp_table_C$pos_id),];
neg_samples_all = table_neg[which(table_neg$id %in% comp_table_C$neg_id),]
View(diff_table_temp)
new_row        = diff_table_temp[which.min(diff_table_temp$totalDiff),];
new_row
rows_to_remove = which(table_neg_temp$id == diff_table_temp$neg_id)
which(table_neg_temp$id == diff_table_temp$neg_id)
which(table_neg_temp$id == new_row$neg_id)
# Setup
rm(list=ls())
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
library(haven)
library(dplyr)
library(stringr)
library(ggplot2)
library(RColorBrewer)
library(forcats)
library(viridis)
library(lubridate)
colMax <- function(data) sapply(data, max, na.rm = TRUE)
colSort <- function(data, ...) sapply(data, sort, ...)
pat  = read_dta("/Users/burcu/desktop/HIV_CONFIDENTIAL/2001stata/pat.dta", encoding = 'Latin1')
table_pos = readRDS("my_tibble_pos.rds")
table_neg = readRDS("my_tibble_neg.rds")
table_pos = merge(table_pos,pat,by="id")
table_neg = merge(table_neg,pat,by="id")
comp_idxs = array(0,dim(table_pos)[1]);
diff_table = tibble(
pos_id = numeric(),
neg_id = numeric(),
cd4Diff = numeric(),
sexDiff = numeric(),
ethnicityDiff = numeric(),
totalDiff     = numeric()
)
table_neg_temp = table_neg;
for (i in seq(1,dim(table_pos)[1])){
# for (i in seq(1,1)){
print(i)
patient_pos = table_pos[i,];
pos_id      = patient_pos$id;
diff_table_temp <- tibble(
pos_id = numeric(),
neg_id = numeric(),
cd4Diff = numeric(),
sexDiff = numeric(),
ethnicityDiff = numeric(),
totalDiff     = numeric()
)
for(k in seq(1,dim(table_neg_temp)[1])){
candidate_neg   = table_neg_temp[k,];
neg_id          = candidate_neg$id;
cd4Diff         = abs(candidate_neg$cd4-patient_pos$cd4);
sexDiff         = abs(candidate_neg$sex-patient_pos$sex);
ethnicityDiff   = abs(candidate_neg$ethnicity-patient_pos$ethnicity);
diff_table_temp = diff_table_temp %>% add_row(pos_id,neg_id,cd4Diff,sexDiff,ethnicityDiff)
}
diff_table_temp$cd4Diff   = diff_table_temp$cd4Diff/max(diff_table_temp$cd4Diff);
diff_table_temp$totalDiff = 100*diff_table_temp$cd4Diff+10*diff_table_temp$sexDiff+1*diff_table_temp$ethnicityDiff;
new_row        = diff_table_temp[which.min(diff_table_temp$totalDiff),];
rows_to_remove = which(table_neg_temp$id == new_row$neg_id);
table_neg_temp = table_neg_temp[!rows_to_remove,];
print(dim(table_neg_temp)[1])
diff_table     = bind_rows(diff_table,new_row)
}
saveRDS(diff_table, "diff_table.rds")
# diff_table_unq = distinct(diff_table)
# dim(distinct(diff_table))[1]
# length(unique(table_pos$id))
comp_table_A = tibble(
pos_id  = numeric(),
neg_id  = numeric(),
pos_cd4 = numeric(),
neg_cd4 = numeric(),
pos_sex = numeric(),
neg_sex = numeric(),
pos_eth = numeric(),
neg_eth = numeric()
)
for (i in seq(1,dim(diff_table)[1])){
pos_id  = diff_table[i,]$pos_id;
neg_id  = diff_table[i,]$neg_id;
pos_cd4 = table_pos[which(table_pos$id==pos_id),]$cd4
neg_cd4 = table_neg[which(table_neg$id==neg_id),]$cd4
pos_sex = table_pos[which(table_pos$id==pos_id),]$sex
neg_sex = table_neg[which(table_neg$id==neg_id),]$sex
pos_eth = table_pos[which(table_pos$id==pos_id),]$ethnicity
neg_eth = table_neg[which(table_neg$id==neg_id),]$ethnicity
comp_table_A  = comp_table_A %>% add_row(pos_id,neg_id,pos_cd4,neg_cd4,pos_sex,neg_sex,pos_eth,neg_eth)
}
saveRDS(comp_table_A, "comp_table_A.rds")
# FILTER EVEN FURTHER - GET THE ONES WITH ONLY SAME SEX AND ETHNICITY
comp_table_B = tibble(
pos_id  = numeric(),
neg_id  = numeric(),
pos_cd4 = numeric(),
neg_cd4 = numeric(),
pos_sex = numeric(),
neg_sex = numeric(),
pos_eth = numeric(),
neg_eth = numeric()
)
for (i in seq(1,dim(comp_table_A)[1])){
pos_id  = comp_table_A[i,]$pos_id;
neg_id  = comp_table_A[i,]$neg_id;
pos_cd4 = comp_table_A[i,]$pos_cd4;
neg_cd4 = comp_table_A[i,]$neg_cd4;
pos_sex = comp_table_A[i,]$pos_sex;
neg_sex = comp_table_A[i,]$neg_sex;
pos_eth = comp_table_A[i,]$pos_eth;
neg_eth = comp_table_A[i,]$neg_eth;
if(pos_sex==neg_sex & pos_eth==neg_eth){
comp_table_B  = comp_table_B %>% add_row(pos_id,neg_id,pos_cd4,neg_cd4,pos_sex,neg_sex,pos_eth,neg_eth)
}
}
saveRDS(comp_table_B, "comp_table_B.rds")
#GET ONLY THE WHITES (ETHNICITY = 1)
comp_table_C = comp_table_B %>% filter(pos_eth==1)
saveRDS(comp_table_C, "comp_table_C.rds")
num_males   = sum((comp_table_C$pos_sex==1)==TRUE)
num_females = sum((comp_table_C$pos_sex==2)==TRUE)
pos_samples_all = table_pos[which(table_pos$id %in% comp_table_C$pos_id),];
neg_samples_all = table_neg[which(table_neg$id %in% comp_table_C$neg_id),]
# Setup
rm(list=ls())
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
library(haven)
library(dplyr)
library(stringr)
library(ggplot2)
library(RColorBrewer)
library(forcats)
library(viridis)
library(lubridate)
colMax <- function(data) sapply(data, max, na.rm = TRUE)
colSort <- function(data, ...) sapply(data, sort, ...)
pat  = read_dta("/Users/burcu/desktop/HIV_CONFIDENTIAL/2001stata/pat.dta", encoding = 'Latin1')
table_pos = readRDS("my_tibble_pos.rds")
table_neg = readRDS("my_tibble_neg.rds")
table_pos = merge(table_pos,pat,by="id")
table_neg = merge(table_neg,pat,by="id")
comp_idxs = array(0,dim(table_pos)[1]);
diff_table = tibble(
pos_id = numeric(),
neg_id = numeric(),
cd4Diff = numeric(),
sexDiff = numeric(),
ethnicityDiff = numeric(),
totalDiff     = numeric()
)
table_neg_temp = table_neg;
# for (i in seq(1,dim(table_pos)[1])){
for (i in seq(1,1)){
print(i)
patient_pos = table_pos[i,];
pos_id      = patient_pos$id;
diff_table_temp <- tibble(
pos_id = numeric(),
neg_id = numeric(),
cd4Diff = numeric(),
sexDiff = numeric(),
ethnicityDiff = numeric(),
totalDiff     = numeric()
)
for(k in seq(1,dim(table_neg_temp)[1])){
candidate_neg   = table_neg_temp[k,];
neg_id          = candidate_neg$id;
cd4Diff         = abs(candidate_neg$cd4-patient_pos$cd4);
sexDiff         = abs(candidate_neg$sex-patient_pos$sex);
ethnicityDiff   = abs(candidate_neg$ethnicity-patient_pos$ethnicity);
diff_table_temp = diff_table_temp %>% add_row(pos_id,neg_id,cd4Diff,sexDiff,ethnicityDiff)
}
diff_table_temp$cd4Diff   = diff_table_temp$cd4Diff/max(diff_table_temp$cd4Diff);
diff_table_temp$totalDiff = 100*diff_table_temp$cd4Diff+10*diff_table_temp$sexDiff+1*diff_table_temp$ethnicityDiff;
new_row        = diff_table_temp[which.min(diff_table_temp$totalDiff),];
rows_to_remove = which(table_neg_temp$id == new_row$neg_id);
table_neg_temp = table_neg_temp[!rows_to_remove,];
print(dim(table_neg_temp)[1])
diff_table     = bind_rows(diff_table,new_row)
}
saveRDS(diff_table, "diff_table.rds")
# diff_table_unq = distinct(diff_table)
# dim(distinct(diff_table))[1]
# length(unique(table_pos$id))
comp_table_A = tibble(
pos_id  = numeric(),
neg_id  = numeric(),
pos_cd4 = numeric(),
neg_cd4 = numeric(),
pos_sex = numeric(),
neg_sex = numeric(),
pos_eth = numeric(),
neg_eth = numeric()
)
for (i in seq(1,dim(diff_table)[1])){
pos_id  = diff_table[i,]$pos_id;
neg_id  = diff_table[i,]$neg_id;
pos_cd4 = table_pos[which(table_pos$id==pos_id),]$cd4
neg_cd4 = table_neg[which(table_neg$id==neg_id),]$cd4
pos_sex = table_pos[which(table_pos$id==pos_id),]$sex
neg_sex = table_neg[which(table_neg$id==neg_id),]$sex
pos_eth = table_pos[which(table_pos$id==pos_id),]$ethnicity
neg_eth = table_neg[which(table_neg$id==neg_id),]$ethnicity
comp_table_A  = comp_table_A %>% add_row(pos_id,neg_id,pos_cd4,neg_cd4,pos_sex,neg_sex,pos_eth,neg_eth)
}
saveRDS(comp_table_A, "comp_table_A.rds")
# FILTER EVEN FURTHER - GET THE ONES WITH ONLY SAME SEX AND ETHNICITY
comp_table_B = tibble(
pos_id  = numeric(),
neg_id  = numeric(),
pos_cd4 = numeric(),
neg_cd4 = numeric(),
pos_sex = numeric(),
neg_sex = numeric(),
pos_eth = numeric(),
neg_eth = numeric()
)
for (i in seq(1,dim(comp_table_A)[1])){
pos_id  = comp_table_A[i,]$pos_id;
neg_id  = comp_table_A[i,]$neg_id;
pos_cd4 = comp_table_A[i,]$pos_cd4;
neg_cd4 = comp_table_A[i,]$neg_cd4;
pos_sex = comp_table_A[i,]$pos_sex;
neg_sex = comp_table_A[i,]$neg_sex;
pos_eth = comp_table_A[i,]$pos_eth;
neg_eth = comp_table_A[i,]$neg_eth;
if(pos_sex==neg_sex & pos_eth==neg_eth){
comp_table_B  = comp_table_B %>% add_row(pos_id,neg_id,pos_cd4,neg_cd4,pos_sex,neg_sex,pos_eth,neg_eth)
}
}
saveRDS(comp_table_B, "comp_table_B.rds")
#GET ONLY THE WHITES (ETHNICITY = 1)
comp_table_C = comp_table_B %>% filter(pos_eth==1)
saveRDS(comp_table_C, "comp_table_C.rds")
num_males   = sum((comp_table_C$pos_sex==1)==TRUE)
num_females = sum((comp_table_C$pos_sex==2)==TRUE)
pos_samples_all = table_pos[which(table_pos$id %in% comp_table_C$pos_id),];
neg_samples_all = table_neg[which(table_neg$id %in% comp_table_C$neg_id),]
rows_to_remove
table_neg_temp
rows_to_remove
table_neg[-rows_to_remove,]
View(table_neg)
tb2=table_neg[-rows_to_remove,];
# Setup
rm(list=ls())
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
library(haven)
library(dplyr)
library(stringr)
library(ggplot2)
library(RColorBrewer)
library(forcats)
library(viridis)
library(lubridate)
colMax <- function(data) sapply(data, max, na.rm = TRUE)
colSort <- function(data, ...) sapply(data, sort, ...)
pat  = read_dta("/Users/burcu/desktop/HIV_CONFIDENTIAL/2001stata/pat.dta", encoding = 'Latin1')
table_pos = readRDS("my_tibble_pos.rds")
table_neg = readRDS("my_tibble_neg.rds")
table_pos = merge(table_pos,pat,by="id")
table_neg = merge(table_neg,pat,by="id")
comp_idxs = array(0,dim(table_pos)[1]);
diff_table = tibble(
pos_id = numeric(),
neg_id = numeric(),
cd4Diff = numeric(),
sexDiff = numeric(),
ethnicityDiff = numeric(),
totalDiff     = numeric()
)
table_neg_temp = table_neg;
for (i in seq(1,dim(table_pos)[1])){
# for (i in seq(1,1)){
print(i)
patient_pos = table_pos[i,];
pos_id      = patient_pos$id;
diff_table_temp <- tibble(
pos_id = numeric(),
neg_id = numeric(),
cd4Diff = numeric(),
sexDiff = numeric(),
ethnicityDiff = numeric(),
totalDiff     = numeric()
)
for(k in seq(1,dim(table_neg_temp)[1])){
candidate_neg   = table_neg_temp[k,];
neg_id          = candidate_neg$id;
cd4Diff         = abs(candidate_neg$cd4-patient_pos$cd4);
sexDiff         = abs(candidate_neg$sex-patient_pos$sex);
ethnicityDiff   = abs(candidate_neg$ethnicity-patient_pos$ethnicity);
diff_table_temp = diff_table_temp %>% add_row(pos_id,neg_id,cd4Diff,sexDiff,ethnicityDiff)
}
diff_table_temp$cd4Diff   = diff_table_temp$cd4Diff/max(diff_table_temp$cd4Diff);
diff_table_temp$totalDiff = 100*diff_table_temp$cd4Diff+10*diff_table_temp$sexDiff+1*diff_table_temp$ethnicityDiff;
new_row        = diff_table_temp[which.min(diff_table_temp$totalDiff),];
rows_to_remove = which(table_neg_temp$id == new_row$neg_id);
table_neg_temp = table_neg_temp[-rows_to_remove,];
print(dim(table_neg_temp)[1])
diff_table     = bind_rows(diff_table,new_row)
}
saveRDS(diff_table, "diff_table.rds")
# diff_table_unq = distinct(diff_table)
# dim(distinct(diff_table))[1]
# length(unique(table_pos$id))
comp_table_A = tibble(
pos_id  = numeric(),
neg_id  = numeric(),
pos_cd4 = numeric(),
neg_cd4 = numeric(),
pos_sex = numeric(),
neg_sex = numeric(),
pos_eth = numeric(),
neg_eth = numeric()
)
for (i in seq(1,dim(diff_table)[1])){
pos_id  = diff_table[i,]$pos_id;
neg_id  = diff_table[i,]$neg_id;
pos_cd4 = table_pos[which(table_pos$id==pos_id),]$cd4
neg_cd4 = table_neg[which(table_neg$id==neg_id),]$cd4
pos_sex = table_pos[which(table_pos$id==pos_id),]$sex
neg_sex = table_neg[which(table_neg$id==neg_id),]$sex
pos_eth = table_pos[which(table_pos$id==pos_id),]$ethnicity
neg_eth = table_neg[which(table_neg$id==neg_id),]$ethnicity
comp_table_A  = comp_table_A %>% add_row(pos_id,neg_id,pos_cd4,neg_cd4,pos_sex,neg_sex,pos_eth,neg_eth)
}
saveRDS(comp_table_A, "comp_table_A.rds")
# FILTER EVEN FURTHER - GET THE ONES WITH ONLY SAME SEX AND ETHNICITY
comp_table_B = tibble(
pos_id  = numeric(),
neg_id  = numeric(),
pos_cd4 = numeric(),
neg_cd4 = numeric(),
pos_sex = numeric(),
neg_sex = numeric(),
pos_eth = numeric(),
neg_eth = numeric()
)
for (i in seq(1,dim(comp_table_A)[1])){
pos_id  = comp_table_A[i,]$pos_id;
neg_id  = comp_table_A[i,]$neg_id;
pos_cd4 = comp_table_A[i,]$pos_cd4;
neg_cd4 = comp_table_A[i,]$neg_cd4;
pos_sex = comp_table_A[i,]$pos_sex;
neg_sex = comp_table_A[i,]$neg_sex;
pos_eth = comp_table_A[i,]$pos_eth;
neg_eth = comp_table_A[i,]$neg_eth;
if(pos_sex==neg_sex & pos_eth==neg_eth){
comp_table_B  = comp_table_B %>% add_row(pos_id,neg_id,pos_cd4,neg_cd4,pos_sex,neg_sex,pos_eth,neg_eth)
}
}
saveRDS(comp_table_B, "comp_table_B.rds")
#GET ONLY THE WHITES (ETHNICITY = 1)
comp_table_C = comp_table_B %>% filter(pos_eth==1)
saveRDS(comp_table_C, "comp_table_C.rds")
num_males   = sum((comp_table_C$pos_sex==1)==TRUE)
num_females = sum((comp_table_C$pos_sex==2)==TRUE)
pos_samples_all = table_pos[which(table_pos$id %in% comp_table_C$pos_id),];
neg_samples_all = table_neg[which(table_neg$id %in% comp_table_C$neg_id),]
View(comp_table_C)
# Setup
rm(list=ls())
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
path2save = paste0("OUT_",format(Sys.time(), "%d_%b_%Y"));
dir.create(path2save)
dir.create(paste0(path2save,"/CSVS/"))
dir.create(paste0(path2save,"/FIGS/"))
dir.create(paste0(path2save,"/RDATA/"))
library(rstan)
library(zoo)
library(Rcpp)
options(mc.cores = parallel::detectCores())
rstan_options(auto_write = TRUE)
source("prepare_data.R")
source("setup.R")
m_relax_in   = 2; #indicator for using relaxation
days2add     = 15; #ADDITIONAL DAYS FOR SIMULATION
date_simul   = date_end + days2add;
data_list = list(
pop_t=pop_size,
tlock_1=as.numeric(date_control_1-date_data+1),
trelax_1=as.numeric(date_relax-date_data+1),
r_end=0.35,
K   = test_fit_vec_1[1],
mu  = test_fit_vec_1[2],
sig = test_fit_vec_1[3],
mult= 3,
D=as.numeric(date_end-date_data+1),
k_daily_cases  = daily_cases_data,
k_icu          = icu_data,
k_daily_deaths = daily_deaths_data,
p_pi        = c(1,999),
p_R0        = c(3,1),
p_tau       = c(2,3.2),
p_gamma_s   = c(2,3.2),
p_gamma_H   = c(2,3),
p_gamma_ICU = c(2,3),
p_eps_H_ICU = c(2,3),
p_eps_H_x   = c(2,10),
p_eps_ICU_x = c(2,10),
p_r_d_s     = c(2,10),
p_r_d_a     = c(2,10),
p_r_lock_1  = c(1,1),
p_r_mr      = c(1,30),
p_phi       = 1/100,
t0=0,
t_data=1,
S=as.numeric(date_simul-date_data+1),
E=days2add,
ts=1:as.numeric(date_end-date_data+1),
ts_pred=1:as.numeric(date_simul-date_data+1)
)
# # IF .rds NOT compiled (run in case of change in model)
# M_model_TR     = stan_model("MODELS/model_TR_RELAX.stan")
# # IF .rds  compiled
M_model_TR = readRDS("MODELS/model_TR_RELAX.rds")
####### FITTING - DEBUG MODE
# T_modelTR      = sampling(M_model_TR,data = data_list,iter=5,chains=1,init="random")
####### FITTING - SHORT VERSION
T_modelTR      = sampling(M_model_TR,data = data_list,warmup=150,iter=500,chains=4,init="random")
####### FITTING - LONG VERSION
# T_modelTR      = sampling(M_model_TR,data = data_list,warmup=500,iter=1500,chains=8,init="random")
save(T_modelTR, file =paste0(path2save,"/RDATA/T_modelTR_mrelax_",m_relax_in,".RData"))
source("analysis_plots_RELAX.R")
source("analysis_chains_RELAX.R")
