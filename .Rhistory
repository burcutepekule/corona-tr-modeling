source("prepare_data.R")
source("setup.R")
days2add     = 45; #ADDITIONAL DAYS FOR SIMULATION
date_simul   = date_end + days2add;
data_list = list(
pop_t=pop_size,
tswitch_1=as.numeric(date_control_3-date_data+1),
trelax=as.numeric(date_relax-date_data+1),
r_end=1,
m_relax=m_relax_in/100,
K   = test_fit_vec_1[1],
mu  = test_fit_vec_1[2],
sig = test_fit_vec_1[3],
D=as.numeric(date_end-date_data+1),
k_daily_cases  = daily_cases_data,
k_icu          = icu_data,
k_daily_deaths = daily_deaths_data,
p_pi        = c(1,999),
p_R0        = c(3,1),
p_tau       = c(2,3.2),
p_gamma_s   = c(2,3.2),
p_gamma_H   = c(2,3),
p_gamma_ICU = c(2,3),
p_eps_H_ICU = c(2,3),
p_eps_H_x   = c(2,10),
p_eps_ICU_x = c(2,10),
p_r_d_s     = c(2,10),
p_r_d_a     = c(2,10),
p_r_lock_1  = c(1,1),
p_phi       = 1/100,
t0=0,
t_data=1,
S=as.numeric(date_simul-date_data+1),
E=days2add,
ts=1:as.numeric(date_end-date_data+1),
ts_pred=1:as.numeric(date_simul-date_data+1),
r_c=0 #dummy control
)
# # IF .rds NOT compiled (run in case of change in model)
M_model_TR     = stan_model("MODELS/model_TR.stan")
# # IF .rds  compiled
# M_model_TR = readRDS("MODELS/model_TR.rds")
####### FITTING - DEBUG MODE
# T_modelTR      = sampling(M_model_TR,data = data_list,iter=5,chains=1,init="random")
####### FITTING - SHORT VERSION
T_modelTR      = sampling(M_model_TR,data = data_list,warmup=250,iter=750,chains=4,init="random")
####### FITTING - LONG VERSION
# T_modelTR      = sampling(M_model_TR,data = data_list,warmup=500,iter=1500,chains=8,init="random")
save(T_modelTR, file =paste0(path2save,"/RDATA/T_modelTR_mrelax_",m_relax_in,".RData"))
source("analysis_plots.R")
source("analysis_chains.R")
source("analysis_TESTS.R")
source("analysis_RE.R")
# Setup
rm(list=ls())
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
path2save = paste0("OUT_",format(Sys.time(), "%d_%b_%Y"));
library(R0)
library(zoo)
library(Rcpp)
library(EpiEstim)
library(ggplot2)
library(incidence)
source("prepare_data.R")
source("setup.R")
plot(as.incidence(daily_cases_data[-1], dates = allDates_agg[-1]))
m_relax_in = 0
load(paste0(path2save,"/RDATA/T_modelTR_mrelax_",m_relax_in,".RData"))
parameterSummary = summary(T_modelTR, c("gamma_s","tau"), probs = c(0.025, 0.25, 0.50, 0.75, 0.975));
list_of_draws <- rstan::extract(T_modelTR)
si=(1/(list_of_draws$gamma_s)+1/(list_of_draws$tau))
res_parametric_si <- estimate_R(daily_cases_data[-1],
method="parametric_si",
config = make_config(list(
mean_si = mean(si),
std_si = 10*sd(si)))
)
head(res_parametric_si$R)
res_parametric_si$dates=allDates_agg[-1];
png(filename=paste0(path2save,"/FIGS/RE_estimate.png"),
width     = 6.25,
height    = 6.25,
units     = "in",
res       = 1200)
plot(res_parametric_si, legend = FALSE)
dev.off()
# Setup
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
source("setup.R")
library(anytime)
library(readr)
library(splines)
library(forecast)
# load the data
data_all         = (read.csv("DATA/CORONA_TR.csv") %>% tbl_df())
cases_data_all   = data_all[,2];
deaths_data_all  = data_all[,4];
icu_data_all     = data_all[,6];
recov_data_all   = data_all[,7];
test_data_all    = data_all[,8];
popsize_data_all = 84180493;
allDates     = as.Date(parse_datetime(as.character(data_all$Date),"%d.%m.%y"));
date_data    = as.Date("2020-03-10");
date_end     = as.Date(tail(allDates, n=1));
data_start   = ymd(date_data)
data_end     = ymd(date_end)
data_control_1 = ymd("2020-03-18") # first lockdown (assuming 2 lockdowns)
date_control_1 = ymd("2020-03-18")
data_control_2 = ymd("2020-04-03") # second lockdown (assuming 2 lockdowns)
date_control_2 = ymd("2020-04-03")
date_control_3 = ymd("2020-03-21") # mid lockdown (assuming 1 lockdown)
data_control_3 = ymd("2020-03-21")
date_relax     = ymd("2020-05-11") # relaxation (if any)
test_data_all   = as.numeric(unlist(test_data_all))
test_data_all_N = test_data_all/max(test_data_all)
recov_data_all  = as.numeric(unlist(recov_data_all))
recov_data_all_N= recov_data_all/max(recov_data_all)
x_all = seq(from=1,to=length(allDates))
# fit to lognormal function
fit_1  = nls(test_data_all_N ~ K*(1/(x_all*sig*sqrt(2*pi)))*exp(-((log(x_all)-mu)/(sqrt(2)*sig))^2), data = data.frame(x_all, test_data_all_N),
start = c(K = 70, mu = 4, sig=0.5))
test_fit_vec_1=as.numeric(coef(fit_1))
png(filename=paste0(path2save,"/FIGS/TESTS_estimate.png"),
width     = 6.25,
height    = 5.25,
units     = "in",
res       = 1200)
plot(allDates,fitted(fit_1),type="l", col="blue", lwd=2, xlab="gun", ylab="normalize test sayisi",ylim=range(fitted(fit_1),test_data_all_N),panel.first = grid())
lines(allDates,test_data_all_N,pch=19,col="black",type="b", lty=2,panel.first = grid())
legend(allDates[2],0.8,legend=c("Lognormal fonksiyon", "Veri"), col=c("blue", "black"), lty=1:2, cex=0.8)
dev.off()
# Setup
rm(list=ls())
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
path2save = paste0("OUT_",format(Sys.time(), "%d_%b_%Y"));
dir.create(path2save)
dir.create(paste0(path2save,"/CSVS/"))
dir.create(paste0(path2save,"/FIGS/"))
dir.create(paste0(path2save,"/RDATA/"))
args <- commandArgs(TRUE)
print(args)
m_relax_in = 0 # slope of relaxation -> if 0, no relaxation
library(rstan)
library(zoo)
library(Rcpp)
options(mc.cores = parallel::detectCores())
rstan_options(auto_write = TRUE)
source("prepare_data.R")
source("setup.R")
days2add     = 45; #ADDITIONAL DAYS FOR SIMULATION
date_simul   = date_end + days2add;
data_list = list(
pop_t=pop_size,
tswitch_1=as.numeric(date_control_3-date_data+1),
trelax=as.numeric(date_relax-date_data+1),
r_end=1,
m_relax=m_relax_in/100,
K   = test_fit_vec_1[1],
mu  = test_fit_vec_1[2],
sig = test_fit_vec_1[3],
D=as.numeric(date_end-date_data+1),
k_daily_cases  = daily_cases_data,
k_icu          = icu_data,
k_daily_deaths = daily_deaths_data,
p_pi        = c(1,999),
p_R0        = c(3,1),
p_tau       = c(2,3.2),
p_gamma_s   = c(2,3.2),
p_gamma_H   = c(2,3),
p_gamma_ICU = c(2,3),
p_eps_H_ICU = c(2,3),
p_eps_H_x   = c(2,10),
p_eps_ICU_x = c(2,10),
p_r_d_s     = c(2,10),
p_r_d_a     = c(2,10),
p_r_lock_1  = c(1,1),
p_phi       = 1/100,
t0=0,
t_data=1,
S=as.numeric(date_simul-date_data+1),
E=days2add,
ts=1:as.numeric(date_end-date_data+1),
ts_pred=1:as.numeric(date_simul-date_data+1),
r_c=0 #dummy control
)
# # IF .rds NOT compiled (run in case of change in model)
M_model_TR     = stan_model("MODELS/model_TR.stan")
# # IF .rds  compiled
# M_model_TR = readRDS("MODELS/model_TR.rds")
####### FITTING - DEBUG MODE
# T_modelTR      = sampling(M_model_TR,data = data_list,iter=5,chains=1,init="random")
####### FITTING - SHORT VERSION
T_modelTR      = sampling(M_model_TR,data = data_list,warmup=250,iter=750,chains=4,init="random")
####### FITTING - LONG VERSION
# T_modelTR      = sampling(M_model_TR,data = data_list,warmup=500,iter=1500,chains=8,init="random")
save(T_modelTR, file =paste0(path2save,"/RDATA/T_modelTR_mrelax_",m_relax_in,".RData"))
source("analysis_plots.R")
source("analysis_chains.R")
# Setup
rm(list=ls())
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
path2save = paste0("OUT_",format(Sys.time(), "%d_%b_%Y"));
dir.create(path2save)
dir.create(paste0(path2save,"/CSVS/"))
dir.create(paste0(path2save,"/FIGS/"))
dir.create(paste0(path2save,"/RDATA/"))
args <- commandArgs(TRUE)
print(args)
m_relax_in = 0 # slope of relaxation -> if 0, no relaxation
library(rstan)
library(zoo)
library(Rcpp)
options(mc.cores = parallel::detectCores())
rstan_options(auto_write = TRUE)
source("prepare_data.R")
source("setup.R")
days2add     = 45; #ADDITIONAL DAYS FOR SIMULATION
date_simul   = date_end + days2add;
data_list = list(
pop_t=pop_size,
tswitch_1=as.numeric(date_control_3-date_data+1),
trelax=as.numeric(date_relax-date_data+1),
r_end=1,
m_relax=m_relax_in/100,
K   = test_fit_vec_1[1],
mu  = test_fit_vec_1[2],
sig = test_fit_vec_1[3],
D=as.numeric(date_end-date_data+1),
k_daily_cases  = daily_cases_data,
k_icu          = icu_data,
k_daily_deaths = daily_deaths_data,
p_pi        = c(1,999),
p_R0        = c(3,1),
p_tau       = c(2,3.2),
p_gamma_s   = c(2,3.2),
p_gamma_H   = c(2,3),
p_gamma_ICU = c(2,3),
p_eps_H_ICU = c(2,3),
p_eps_H_x   = c(2,10),
p_eps_ICU_x = c(2,10),
p_r_d_s     = c(2,10),
p_r_d_a     = c(2,10),
p_r_lock_1  = c(1,1),
p_phi       = 1/100,
t0=0,
t_data=1,
S=as.numeric(date_simul-date_data+1),
E=days2add,
ts=1:as.numeric(date_end-date_data+1),
ts_pred=1:as.numeric(date_simul-date_data+1),
r_c=0 #dummy control
)
# # IF .rds NOT compiled (run in case of change in model)
M_model_TR     = stan_model("MODELS/model_TR.stan")
# # IF .rds  compiled
# M_model_TR = readRDS("MODELS/model_TR.rds")
####### FITTING - DEBUG MODE
# T_modelTR      = sampling(M_model_TR,data = data_list,iter=5,chains=1,init="random")
####### FITTING - SHORT VERSION
T_modelTR      = sampling(M_model_TR,data = data_list,warmup=250,iter=750,chains=4,init="random")
####### FITTING - LONG VERSION
# T_modelTR      = sampling(M_model_TR,data = data_list,warmup=500,iter=1500,chains=8,init="random")
save(T_modelTR, file =paste0(path2save,"/RDATA/T_modelTR_mrelax_",m_relax_in,".RData"))
source("analysis_plots.R")
source("analysis_chains.R")
# Setup
rm(list=ls())
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
path2save = paste0("OUT_",format(Sys.time(), "%d_%b_%Y"));
library(R0)
library(zoo)
library(Rcpp)
library(EpiEstim)
library(ggplot2)
library(incidence)
source("prepare_data.R")
source("setup.R")
plot(as.incidence(daily_cases_data[-1], dates = allDates_agg[-1]))
m_relax_in = 0
load(paste0(path2save,"/RDATA/T_modelTR_mrelax_",m_relax_in,".RData"))
parameterSummary = summary(T_modelTR, c("gamma_s","tau"), probs = c(0.025, 0.25, 0.50, 0.75, 0.975));
list_of_draws <- rstan::extract(T_modelTR)
si=(1/(list_of_draws$gamma_s)+1/(list_of_draws$tau))
res_parametric_si <- estimate_R(daily_cases_data[-1],
method="parametric_si",
config = make_config(list(
mean_si = mean(si),
std_si = 10*sd(si)))
)
head(res_parametric_si$R)
res_parametric_si$dates=allDates_agg[-1];
png(filename=paste0(path2save,"/FIGS/RE_estimate.png"),
width     = 6.25,
height    = 6.25,
units     = "in",
res       = 1200)
plot(res_parametric_si, legend = FALSE)
dev.off()
# Setup
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
source("setup.R")
library(anytime)
library(readr)
library(splines)
library(forecast)
# load the data
data_all         = (read.csv("DATA/CORONA_TR.csv") %>% tbl_df())
cases_data_all   = data_all[,2];
deaths_data_all  = data_all[,4];
icu_data_all     = data_all[,6];
recov_data_all   = data_all[,7];
test_data_all    = data_all[,8];
popsize_data_all = 84180493;
allDates     = as.Date(parse_datetime(as.character(data_all$Date),"%d.%m.%y"));
date_data    = as.Date("2020-03-10");
date_end     = as.Date(tail(allDates, n=1));
data_start   = ymd(date_data)
data_end     = ymd(date_end)
data_control_1 = ymd("2020-03-18") # first lockdown (assuming 2 lockdowns)
date_control_1 = ymd("2020-03-18")
data_control_2 = ymd("2020-04-03") # second lockdown (assuming 2 lockdowns)
date_control_2 = ymd("2020-04-03")
date_control_3 = ymd("2020-03-21") # mid lockdown (assuming 1 lockdown)
data_control_3 = ymd("2020-03-21")
date_relax     = ymd("2020-05-11") # relaxation (if any)
test_data_all   = as.numeric(unlist(test_data_all))
test_data_all_N = test_data_all/max(test_data_all)
recov_data_all  = as.numeric(unlist(recov_data_all))
recov_data_all_N= recov_data_all/max(recov_data_all)
x_all = seq(from=1,to=length(allDates))
# fit to lognormal function
fit_1  = nls(test_data_all_N ~ K*(1/(x_all*sig*sqrt(2*pi)))*exp(-((log(x_all)-mu)/(sqrt(2)*sig))^2), data = data.frame(x_all, test_data_all_N),
start = c(K = 70, mu = 4, sig=0.5))
test_fit_vec_1=as.numeric(coef(fit_1))
png(filename=paste0(path2save,"/FIGS/TESTS_estimate.png"),
width     = 6.25,
height    = 5.25,
units     = "in",
res       = 1200)
plot(allDates,fitted(fit_1),type="l", col="blue", lwd=2, xlab="gun", ylab="normalize test sayisi",ylim=range(fitted(fit_1),test_data_all_N),panel.first = grid())
lines(allDates,test_data_all_N,pch=19,col="black",type="b", lty=2,panel.first = grid())
legend(allDates[2],0.8,legend=c("Lognormal fonksiyon", "Veri"), col=c("blue", "black"), lty=1:2, cex=0.8)
dev.off()
# Setup
rm(list=ls())
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
path2save = paste0("OUT_",format(Sys.time(), "%d_%b_%Y"));
library(R0)
library(zoo)
library(Rcpp)
library(EpiEstim)
library(ggplot2)
library(incidence)
source("prepare_data.R")
source("setup.R")
plot(as.incidence(daily_cases_data[-1], dates = allDates_agg[-1]))
m_relax_in = 0
load(paste0(path2save,"/RDATA/T_modelTR_mrelax_",m_relax_in,".RData"))
parameterSummary = summary(T_modelTR, c("gamma_s","tau"), probs = c(0.025, 0.25, 0.50, 0.75, 0.975));
list_of_draws <- rstan::extract(T_modelTR)
si=(1/(list_of_draws$gamma_s)+1/(list_of_draws$tau))
res_parametric_si <- estimate_R(daily_cases_data[-1],
method="parametric_si",
config = make_config(list(
mean_si = mean(si),
std_si = 10*sd(si)))
)
head(res_parametric_si$R)
res_parametric_si$dates=allDates_agg[-1];
png(filename=paste0(path2save,"/FIGS/RE_estimate.png"),
width     = 6.25,
height    = 6.25,
units     = "in",
res       = 1200)
plot(res_parametric_si, legend = FALSE)
dev.off()
res_parametric_si
res_parametric_si$R
# Setup
rm(list=ls())
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
path2save = paste0("OUT_",format(Sys.time(), "%d_%b_%Y"));
library(R0)
library(zoo)
library(Rcpp)
library(EpiEstim)
library(ggplot2)
library(incidence)
source("prepare_data.R")
source("setup.R")
# load the data
data_all         = (read.csv("DATA/CORONA_TR.csv") %>% tbl_df())
cases_data_all   = data_all[,2];
deaths_data_all  = data_all[,4];
icu_data_all     = data_all[,6];
recov_data_all   = data_all[,7];
test_data_all    = data_all[,8];
popsize_data_all = 84180493;
allDates     = as.Date(parse_datetime(as.character(data_all$Date),"%d.%m.%y"));
date_data    = as.Date("2020-03-10");
date_end     = as.Date(tail(allDates, n=1));
data_start   = ymd(date_data)
data_end     = ymd(date_end)
test_data_all   = as.numeric(unlist(test_data_all))
daily_cases_data/test_data_all
daily_cases_data
daily_cases_data
daily_cases_data[-1]
daily_cases_data[-1]/test_data_all
test_data_all
daily_cases_data[-21]/test_data_all[-20]
daily_cases_data[-21]
daily_cases_data[-2]
daily_cases_data[-21]
daily_cases_data[-2]
daily_cases_data[-1]
daily_cases_data
daily_cases_data[-3]
daily_cases_data[10:]
daily_cases_data[-(1:21)]
daily_cases_data[-(1:21)]/test_data_all[-(1:20)]
test_data_all
daily_cases_data[-(1:46)]/test_data_all[-(1:45)]
max(test_data_all)
max(test_data_all)*daily_cases_data[-(1:46)]/test_data_all[-(1:45)]
daily_cases_data[1:45]
newTestData = daily_cases_data;
newTestData[46:75] = max(test_data_all)*daily_cases_data[-(1:46)]/test_data_all[-(1:45)]
newTestData
newTestData = daily_cases_data;
newTestData[46:76] = max(test_data_all)*daily_cases_data[-(1:46)]/test_data_all[-(1:45)]
newTestData = daily_cases_data;
newTestData[47:76] = max(test_data_all)*daily_cases_data[-(1:46)]/test_data_all[-(1:45)]
newTestData
plot(as.incidence(newTestData[-1], dates = allDates_agg[-1]))
a
a
test_data_all   = as.numeric(unlist(test_data_all))
newTestData     = daily_cases_data;
newTestData[47:76] = max(test_data_all)*daily_cases_data[-(1:46)]/test_data_all[-(1:45)]
daily_cases_data   = newTestData
plot(as.incidence(daily_cases_data[-1], dates = allDates_agg[-1]))
m_relax_in = 0
load(paste0(path2save,"/RDATA/T_modelTR_mrelax_",m_relax_in,".RData"))
parameterSummary = summary(T_modelTR, c("gamma_s","tau"), probs = c(0.025, 0.25, 0.50, 0.75, 0.975));
list_of_draws <- rstan::extract(T_modelTR)
si=(1/(list_of_draws$gamma_s)+1/(list_of_draws$tau))
res_parametric_si <- estimate_R(daily_cases_data[-1],
method="parametric_si",
config = make_config(list(
mean_si = mean(si),
std_si = 10*sd(si)))
)
head(res_parametric_si$R)
res_parametric_si$dates=allDates_agg[-1];
png(filename=paste0(path2save,"/FIGS/RE_estimate_CORR.png"),
width     = 6.25,
height    = 6.25,
units     = "in",
res       = 1200)
plot(res_parametric_si, legend = FALSE)
# Setup
rm(list=ls())
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
path2save = paste0("OUT_",format(Sys.time(), "%d_%b_%Y"));
library(R0)
library(zoo)
library(Rcpp)
library(EpiEstim)
library(ggplot2)
library(incidence)
source("prepare_data.R")
source("setup.R")
# load the data
data_all         = (read.csv("DATA/CORONA_TR.csv") %>% tbl_df())
cases_data_all   = data_all[,2];
deaths_data_all  = data_all[,4];
icu_data_all     = data_all[,6];
recov_data_all   = data_all[,7];
test_data_all    = data_all[,8];
popsize_data_all = 84180493;
allDates     = as.Date(parse_datetime(as.character(data_all$Date),"%d.%m.%y"));
date_data    = as.Date("2020-03-10");
date_end     = as.Date(tail(allDates, n=1));
data_start   = ymd(date_data)
data_end     = ymd(date_end)
test_data_all   = as.numeric(unlist(test_data_all))
newTestData     = daily_cases_data;
newTestData[47:76] = max(test_data_all)*daily_cases_data[-(1:46)]/test_data_all[-(1:45)]
daily_cases_data   = newTestData
plot(as.incidence(daily_cases_data[-1], dates = allDates_agg[-1]))
m_relax_in = 0
load(paste0(path2save,"/RDATA/T_modelTR_mrelax_",m_relax_in,".RData"))
parameterSummary = summary(T_modelTR, c("gamma_s","tau"), probs = c(0.025, 0.25, 0.50, 0.75, 0.975));
list_of_draws <- rstan::extract(T_modelTR)
si=(1/(list_of_draws$gamma_s)+1/(list_of_draws$tau))
res_parametric_si <- estimate_R(daily_cases_data[-1],
method="parametric_si",
config = make_config(list(
mean_si = mean(si),
std_si = 10*sd(si)))
)
head(res_parametric_si$R)
res_parametric_si$dates=allDates_agg[-1];
png(filename=paste0(path2save,"/FIGS/RE_estimate_CORR.png"),
width     = 6.25,
height    = 6.25,
units     = "in",
res       = 1200)
plot(res_parametric_si, legend = FALSE)
dev.off()
res_parametric_si$R
