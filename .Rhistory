if (file.exists(".RData")) file.remove(".RData")
install.packages("rstan", repos = "https://cloud.r-project.org/", dependencies = TRUE)
pkgbuild::has_build_tools(debug = TRUE)
dotR <- file.path(Sys.getenv("HOME"), ".R")
if (!file.exists(dotR)) dir.create(dotR)
M <- file.path(dotR, ifelse(.Platform$OS.type == "windows", "Makevars.win", "Makevars"))
if (!file.exists(M)) file.create(M)
cat("\nCXX14FLAGS=-O3 -march=native -mtune=native",
if( grepl("^darwin", R.version$os)) "CXX14FLAGS += -arch x86_64 -ftemplate-depth-256" else
if (.Platform$OS.type == "windows") "CXX11FLAGS=-O3 -march=corei7 -mtune=corei7" else
"CXX14FLAGS += -fPIC",
file = M, sep = "\n", append = TRUE)
install.packages("rstan", type = "source")
load("/Users/burcu/Desktop/btepekule/COVID_IC_LOCAL/IC_OUT/OUT_SWITZERLAND/RDATA/T_modelBT_rc_0_mrelax_0.RData")
library(rstan)
library(zoo)
library(Rcpp)
library(lubridate)
library(cowplot)
library(tidyverse)
options(mc.cores = parallel::detectCores())
rstan_options(auto_write = TRUE)
args <- commandArgs(TRUE)
print(args)
# r_c_in <- as.integer(args[1])
# m_relax_in <- as.integer(args[2])
m_relax_in <- 0
source("/Users/burcu/Desktop/btepekule/COVID_IC_LOCAL/prepare_data.R")
source("/Users/burcu/Desktop/btepekule/COVID_IC_LOCAL/setup.R")
# no issue with CH in terms of NA values, but might need to use na.locf at one point for other cantons
canton_name = "CH";
cases_data  = cases_data_all %>% select(canton_name);
deaths_data = deaths_data_all %>% select(canton_name);
icu_data    = icu_data_all %>% select(canton_name);
hosp_data   = hosp_data_all %>% select(canton_name);
pop_size    = as.numeric(popsize_data_all[popsize_data_all$name==canton_name,2])
daily_cases_data = append(diff(as.numeric(unlist(cases_data)),lag=1),as.numeric(cases_data[1,1]),after=0);
daily_deaths_data= append(diff(as.numeric(unlist(deaths_data)),lag=1),as.numeric(deaths_data[1,1]),after=0);
icu_data         = as.numeric(unlist(icu_data));
hosp_data        = as.numeric(unlist(hosp_data));
daily_cases_data = append(daily_cases_data,0,after=0);
daily_deaths_data= append(daily_deaths_data,0,after=0);
icu_data         = append(icu_data,0,after=0);
hosp_data        = append(hosp_data,0,after=0);
allDates_agg     = append(allDates,data_start,after=0);
agg_data         = tibble(allDates_agg,daily_cases_data,daily_deaths_data,icu_data,hosp_data);
observed_data    = c(daily_cases_data,hosp_data,icu_data,daily_deaths_data);
observed_dates   = c(allDates_agg,allDates_agg,allDates_agg,allDates_agg);
days2add     = 26*7;
date_simul   = date_end + days2add;
data_list = list(
pop_t=pop_size,
tswitch=as.numeric(date_control-date_data+1),
trelax=as.numeric(date_relax-date_data+1),
r_end=1,
m_relax=m_relax_in/100,
gamma_c=1/14,
D=as.numeric(date_end-date_data+1),
k_daily_cases  = daily_cases_data,
k_hospit       = hosp_data,
k_icu          = icu_data,
k_daily_deaths = daily_deaths_data,
p_pi        = c(1,999),
p_R0        = c(2.5,1),
p_tau       = 1/2.5,
p_gamma_s   = 1/2.5,
p_gamma_H   = 1/12,
p_gamma_ICU = 1/12,
p_eps_H     = c(1,1),
p_eps_H2ICU = c(1,1),
p_eps_x_ICU = c(1,1),
p_r_d_s     = c(1,1),
p_r_d_c     = c(1,1),
p_r_lock    = c(1,1),
p_phi       = 1/100,
t0=0,
t_data=1,
S=as.numeric(date_simul-date_data+1),
E=days2add,
ts=1:as.numeric(date_end-date_data+1),
ts_pred=1:as.numeric(date_simul-date_data+1),
r_c=r_c_in
)
r_c_in=0
data_list = list(
pop_t=pop_size,
tswitch=as.numeric(date_control-date_data+1),
trelax=as.numeric(date_relax-date_data+1),
r_end=1,
m_relax=m_relax_in/100,
gamma_c=1/14,
D=as.numeric(date_end-date_data+1),
k_daily_cases  = daily_cases_data,
k_hospit       = hosp_data,
k_icu          = icu_data,
k_daily_deaths = daily_deaths_data,
p_pi        = c(1,999),
p_R0        = c(2.5,1),
p_tau       = 1/2.5,
p_gamma_s   = 1/2.5,
p_gamma_H   = 1/12,
p_gamma_ICU = 1/12,
p_eps_H     = c(1,1),
p_eps_H2ICU = c(1,1),
p_eps_x_ICU = c(1,1),
p_r_d_s     = c(1,1),
p_r_d_c     = c(1,1),
p_r_lock    = c(1,1),
p_phi       = 1/100,
t0=0,
t_data=1,
S=as.numeric(date_simul-date_data+1),
E=days2add,
ts=1:as.numeric(date_end-date_data+1),
ts_pred=1:as.numeric(date_simul-date_data+1),
r_c=r_c_in
)
parameterSummary = summary(T_modelBT, c("R0","tau","gamma_s","gamma_H","gamma_ICU","eps_H","eps_H2ICU","eps_x_ICU","r_d_s","r_d_c","r_lock","shift_lock","m_lock","phi"), probs = c(0.025, 0.25, 0.50, 0.75, 0.975))
pp3 = c("predicted_daily_cases","predicted_current_hospit","predicted_current_icu","predicted_daily_deaths")
model_output_all = summary(T_modelBT,pp3)[[1]] %>%
tbl_df() %>%
mutate(t=rep(1:data_list$S,4),
date=date_data+t-1,
eta="-100%",
type=rep(pp3,each=data_list$S)) %>%
mutate(populations=factor(type,levels=pp3,
labels=c("Number of daily cases","Hospital admissions","ICU admissions","Number of daily deaths")))
ggplot() +
geom_ribbon(data=model_output_all,aes(x=date,ymin=`2.5%`,ymax=`97.5%`,fill=populations),alpha=.5) +
geom_line(data=model_output_all,aes(x=date,y=`50%`),colour="black") +
facet_wrap(~ populations ,scales="free",nrow=2) +
geom_vline(xintercept=date_control,linetype=2) +
geom_vline(xintercept=date_end,linetype=2) +
scale_colour_manual(values=c("grey20","black"),guide=FALSE) +
scale_alpha_manual(values=c(1,0),guide=FALSE) +
scale_x_date(date_breaks="2 weeks",date_labels="%b %d") +
theme(axis.text.x=element_text(angle=45,hjust=1)) +
geom_point(data=agg_data,aes(x=all_dates,y=all_data,fill=populations),shape=21,size=2,colour = "black", fill = "white") +
labs(x="Days",y="N")+
scale_y_continuous(trans = 'log10')
ggsave(paste0("/Users/burcu/Desktop/btepekule/COVID_IC_LOCAL/IC_OUT/OUT_SWITZERLAND/FIGS/figure_all_rc_",r_c_in,"_mrelax_",m_relax_in,".png"),width = 20, height = 10)
View(agg_data)
ggplot() +
geom_ribbon(data=model_output_all,aes(x=date,ymin=`2.5%`,ymax=`97.5%`,fill=populations),alpha=.5) +
geom_line(data=model_output_all,aes(x=date,y=`50%`),colour="black") +
facet_wrap(~ populations ,scales="free",nrow=2) +
geom_vline(xintercept=date_control,linetype=2) +
geom_vline(xintercept=date_end,linetype=2) +
scale_colour_manual(values=c("grey20","black"),guide=FALSE) +
scale_alpha_manual(values=c(1,0),guide=FALSE) +
scale_x_date(date_breaks="2 weeks",date_labels="%b %d") +
theme(axis.text.x=element_text(angle=45,hjust=1)) +
geom_point(data=agg_data,aes(x=allDates_agg,y=all_data,fill=populations),shape=21,size=2,colour = "black", fill = "white") +
labs(x="Days",y="N")+
scale_y_continuous(trans = 'log10')
ggsave(paste0("/Users/burcu/Desktop/btepekule/COVID_IC_LOCAL/IC_OUT/OUT_SWITZERLAND/FIGS/figure_all_rc_",r_c_in,"_mrelax_",m_relax_in,".png"),width = 20, height = 10)
View(agg_data)
agg_data_all = tibble(all_dates=observed_dates,all_data=observed_data,populations=model_output_fitted$populations);
agg_data_all = tibble(all_dates=observed_dates,all_data=observed_data,populations=model_output_all$populations);
model_output_all = summary(T_modelBT,pp3)[[1]] %>%
tbl_df() %>%
mutate(t=rep(1:data_list$S,4),
date=date_data+t-1,
eta="-100%",
type=rep(pp3,each=data_list$S)) %>%
mutate(populations=factor(type,levels=pp3,
labels=c("Number of daily cases","Hospital admissions","ICU admissions","Number of daily deaths")))
agg_data_all = tibble(all_dates=observed_dates,all_data=observed_data,populations=model_output_all$populations);
# Setup
rm(list=ls())
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
path2save = paste0("OUT_",format(Sys.time(), "%d_%b_%Y"));
dir.create(path2save)
dir.create(paste0(path2save,"/CSVS/"))
dir.create(paste0(path2save,"/FIGS/"))
dir.create(paste0(path2save,"/RDATA/"))
library(rstan)
library(zoo)
library(Rcpp)
options(mc.cores = parallel::detectCores())
rstan_options(auto_write = TRUE)
source("prepare_data.R")
source("setup.R")
m_relax_in   = 3; #indicator for using relaxation
days2add     = 15; #ADDITIONAL DAYS FOR SIMULATION
date_simul   = date_end + days2add;
data_list = list(
pop_t=pop_size,
tlock_1=as.numeric(date_control_1-date_data+1),
trelax_1=as.numeric(date_relax-date_data+1),
K   = test_fit_vec_1[1],
mu  = test_fit_vec_1[2],
sig = test_fit_vec_1[3],
mult= 3,
D=as.numeric(date_end-date_data+1),
k_daily_cases  = daily_cases_data,
k_icu          = icu_data,
k_daily_deaths = daily_deaths_data,
p_pi        = c(1,999),
p_R0        = c(3,1),
p_tau       = c(2,3.2),
p_gamma_s   = c(2,3.2),
p_gamma_H   = c(2,3),
p_gamma_ICU = c(2,3),
p_eps_H_ICU = c(2,3),
p_eps_H_x   = c(2,10),
p_eps_ICU_x = c(2,10),
p_r_d_s     = c(2,10),
p_r_d_a     = c(2,10),
p_r_lock_1  = c(1,1),
p_r_end     = c(1,30),
p_phi       = 1/100,
t0=0,
t_data=1,
S=as.numeric(date_simul-date_data+1),
E=days2add,
ts=1:as.numeric(date_end-date_data+1),
ts_pred=1:as.numeric(date_simul-date_data+1)
)
# # IF .rds NOT compiled (run in case of change in model)
# c
# # IF .rds  compiled
M_model_TR = readRDS("MODELS/model_TR_RELAX_REND.rds")
####### FITTING - DEBUG MODE
# T_modelTR      = sampling(M_model_TR,data = data_list,iter=5,chains=1,init="random")
####### FITTING - SHORT VERSION
T_modelTR      = sampling(M_model_TR,data = data_list,warmup=150,iter=500,chains=4,init="random")
####### FITTING - LONG VERSION
# T_modelTR      = sampling(M_model_TR,data = data_list,warmup=500,iter=1500,chains=8,init="random")
save(T_modelTR, file =paste0(path2save,"/RDATA/T_modelTR_mrelax_",m_relax_in,".RData"))
source("analysis_plots_RELAX.R")
source("analysis_chains_RELAX.R")
source("analysis_plots_RELAX_REND.R")
source("analysis_chains_RELAX_REND.R")
# Setup
rm(list=ls())
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
path2save = paste0("OUT_",format(Sys.time(), "%d_%b_%Y"));
library(R0)
library(zoo)
library(Rcpp)
library(EpiEstim)
library(ggplot2)
library(incidence)
source("prepare_data.R")
source("setup.R")
plot(as.incidence(daily_cases_data[-1], dates = allDates_agg[-1]))
m_relax_in = 1
# load(paste0(path2save,"/RDATA/T_modelTR_mrelax_",m_relax_in,".RData"))
load("/Users/burcu/Dropbox/corona-tr-modeling/OUT_08_Jun_2020/RDATA/T_modelTR_mrelax_0.RData")
parameterSummary = summary(T_modelTR, c("gamma_s","tau"), probs = c(0.025, 0.25, 0.50, 0.75, 0.975));
list_of_draws <- rstan::extract(T_modelTR)
si=(1/(list_of_draws$gamma_s)+1/(list_of_draws$tau))
res_parametric_si <- estimate_R(daily_cases_data[-1],
method="parametric_si",
config = make_config(list(
mean_si = mean(si),
std_si = 10*sd(si)))
)
head(res_parametric_si$R)
res_parametric_si$dates=allDates_agg[-1];
png(filename=paste0(path2save,"/FIGS/RE_estimate.png"),
width     = 6.25,
height    = 6.25,
units     = "in",
res       = 1200)
plot(res_parametric_si, legend = FALSE)
dev.off()
# Setup
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
source("setup.R")
library(anytime)
library(readr)
library(splines)
library(forecast)
# load the data
data_all         = (read.csv("DATA/CORONA_TR.csv") %>% tbl_df())
cases_data_all   = data_all[,2];
deaths_data_all  = data_all[,4];
icu_data_all     = data_all[,6];
recov_data_all   = data_all[,7];
test_data_all    = data_all[,8];
popsize_data_all = 84180493;
allDates     = as.Date(parse_datetime(as.character(data_all$Date),"%d.%m.%y"));
date_data    = as.Date("2020-03-10");
date_end     = as.Date(tail(allDates, n=1));
data_start   = ymd(date_data)
data_end     = ymd(date_end)
data_control_1 = ymd("2020-03-18") # first lockdown (assuming 2 lockdowns)
date_control_1 = ymd("2020-03-18")
data_control_2 = ymd("2020-04-03") # second lockdown (assuming 2 lockdowns)
date_control_2 = ymd("2020-04-03")
date_control_3 = ymd("2020-03-21") # mid lockdown (assuming 1 lockdown)
data_control_3 = ymd("2020-03-21")
date_relax     = ymd("2020-06-01") # relaxation (if any)
test_data_all   = as.numeric(unlist(test_data_all))
test_data_all_N = test_data_all/max(test_data_all)
recov_data_all  = as.numeric(unlist(recov_data_all))
recov_data_all_N= recov_data_all/max(recov_data_all)
x_all = seq(from=1,to=length(allDates))
# fit to lognormal function
fit_1  = nls(test_data_all_N ~ K*(1/(x_all*sig*sqrt(2*pi)))*exp(-((log(x_all)-mu)/(sqrt(2)*sig))^2), data = data.frame(x_all, test_data_all_N),
start = c(K = 70, mu = 4, sig=0.5))
test_fit_vec_1=as.numeric(coef(fit_1))
png(filename=paste0(path2save,"/FIGS/TESTS_estimate.png"),
width     = 6.25,
height    = 5.25,
units     = "in",
res       = 1200)
plot(allDates,fitted(fit_1),type="l", col="blue", lwd=2, xlab="gun", ylab="normalize test sayisi",ylim=range(fitted(fit_1),test_data_all_N),panel.first = grid())
lines(allDates,test_data_all_N,pch=19,col="black",type="b", lty=2,panel.first = grid())
legend(allDates[2],0.8,legend=c("Lognormal fonksiyon", "Veri"), col=c("blue", "black"), lty=1:2, cex=0.8)
dev.off()
# Setup
rm(list=ls())
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
path2save = paste0("OUT_",format(Sys.time(), "%d_%b_%Y"));
dir.create(path2save)
dir.create(paste0(path2save,"/CSVS/"))
dir.create(paste0(path2save,"/FIGS/"))
dir.create(paste0(path2save,"/RDATA/"))
library(rstan)
library(zoo)
library(Rcpp)
options(mc.cores = parallel::detectCores())
rstan_options(auto_write = TRUE)
source("prepare_data.R")
source("setup.R")
m_relax_in   = 3; #indicator for using relaxation
days2add     = 15; #ADDITIONAL DAYS FOR SIMULATION
date_simul   = date_end + days2add;
data_list = list(
pop_t=pop_size,
tlock_1=as.numeric(date_control_1-date_data+1),
trelax_1=as.numeric(date_relax-date_data+1),
K   = test_fit_vec_1[1],
mu  = test_fit_vec_1[2],
sig = test_fit_vec_1[3],
mult= 3,
D=as.numeric(date_end-date_data+1),
k_daily_cases  = daily_cases_data,
k_icu          = icu_data,
k_daily_deaths = daily_deaths_data,
p_pi        = c(1,999),
p_R0        = c(3,1),
p_tau       = c(2,3.2),
p_gamma_s   = c(2,3.2),
p_gamma_H   = c(2,3),
p_gamma_ICU = c(2,3),
p_eps_H_ICU = c(2,3),
p_eps_H_x   = c(2,10),
p_eps_ICU_x = c(2,10),
p_r_d_s     = c(2,10),
p_r_d_a     = c(2,10),
p_r_lock_1  = c(1,1),
p_r_end     = c(1,20),
p_phi       = 1/100,
t0=0,
t_data=1,
S=as.numeric(date_simul-date_data+1),
E=days2add,
ts=1:as.numeric(date_end-date_data+1),
ts_pred=1:as.numeric(date_simul-date_data+1)
)
# # IF .rds NOT compiled (run in case of change in model)
# c
# # IF .rds  compiled
M_model_TR = readRDS("MODELS/model_TR_RELAX_REND.rds")
####### FITTING - DEBUG MODE
# T_modelTR      = sampling(M_model_TR,data = data_list,iter=5,chains=1,init="random")
####### FITTING - SHORT VERSION
T_modelTR      = sampling(M_model_TR,data = data_list,warmup=250,iter=750,chains=4,init="random")
####### FITTING - LONG VERSION
# T_modelTR      = sampling(M_model_TR,data = data_list,warmup=500,iter=1500,chains=8,init="random")
save(T_modelTR, file =paste0(path2save,"/RDATA/T_modelTR_mrelax_",m_relax_in,".RData"))
source("analysis_plots_RELAX_REND.R")
source("analysis_chains_RELAX_REND.R")
library(readxl)
library(writexl)
my_tibble_pos = readRDS(paste0("my_tibble_pos_RNA_COFF_",rna_cutoff,".rds"))
my_tibble_neg = readRDS(paste0("my_tibble_neg_RNA_COFF_",rna_cutoff,".rds"))
comp_table    = readRDS(paste0("comp_table_A_RNA_COFF_",rna_cutoff,".rds"))
lab_pos       = my_tibble_pos[which(my_tibble_pos$id %in% comp_table$pos_id),]
lab_neg       = my_tibble_neg[which(my_tibble_neg$id %in% comp_table$neg_id),]
merged_table = tibble(
id_pos  = numeric(),
cd4_pos = numeric(),
rna_pos = numeric(),
labdate_pos      = date(as.character()),
tb_test_date_pos = date(as.character()),
tb_test_pos      = numeric(),
tb_test_type_pos = numeric(),
sex_pos = numeric(),
eth_pos = numeric(),
s_id_pos      = as.character(),
center2_pos   = numeric(),
lab_stock_pos = numeric(),
id_neg  = numeric(),
cd4_neg = numeric(),
rna_neg = numeric(),
labdate_neg      = date(as.character()),
tb_test_date_neg = date(as.character()),
tb_test_neg      = numeric(),
tb_test_type_neg = numeric(),
sex_neg = numeric(),
eth_neg = numeric(),
s_id_neg      = as.character(),
center2_neg   = numeric(),
lab_stock_neg = numeric()
)
for (i in seq(1,dim(comp_table)[1])){
id_pos  = comp_table[i,]$pos_id;
id_neg  = comp_table[i,]$neg_id;
sex_pos = comp_table[i,]$pos_sex;
sex_neg = comp_table[i,]$neg_sex;
eth_pos = comp_table[i,]$pos_eth;
eth_neg = comp_table[i,]$neg_eth;
s_id_pos = comp_table[i,]$pos_s_id;
s_id_neg = comp_table[i,]$neg_s_id;
row_pos_lab = lab_pos[which(lab_pos$id==id_pos),];
row_neg_lab = lab_neg[which(lab_neg$id==id_neg),];
labdate_pos = row_pos_lab$labdate;
labdate_neg = row_neg_lab$labdate;
cd4_pos = row_pos_lab$cd4;
cd4_neg = row_neg_lab$cd4;
rna_pos = row_pos_lab$rna;
rna_neg = row_neg_lab$rna;
tb_test_date_pos = row_pos_lab$tb_test_date;
tb_test_date_neg = row_neg_lab$tb_test_date;
tb_test_pos      = row_pos_lab$tb_test;
tb_test_neg      = row_neg_lab$tb_test;
tb_test_type_pos = row_pos_lab$tb_test_type;
tb_test_type_neg = row_neg_lab$tb_test_type;
center2_pos      = row_pos_lab$center2;
center2_neg      = row_neg_lab$center2;
lab_stock_pos    = row_pos_lab$lab_stock;
lab_stock_neg    = row_neg_lab$lab_stock;
merged_table = merged_table %>% add_row(id_pos,cd4_pos,rna_pos,labdate_pos,tb_test_date_pos,
tb_test_pos,tb_test_type_pos,sex_pos,eth_pos,s_id_pos,center2_pos,lab_stock_pos,
id_neg,cd4_neg,rna_neg,labdate_neg,tb_test_date_neg,
tb_test_neg,tb_test_type_neg,sex_neg,eth_neg,s_id_neg,center2_neg,lab_stock_neg);
}
write_xlsx(merged_table,paste0("./MERGED_TABLE_A_RNA_COFF_",rna_cutoff,".xlsx"))
readRDS(paste0("comp_table_A_RNA_COFF_",rna_cutoff,".rds"))
rna_cutoff=250
library(readxl)
library(writexl)
my_tibble_pos = readRDS(paste0("my_tibble_pos_RNA_COFF_",rna_cutoff,".rds"))
my_tibble_neg = readRDS(paste0("my_tibble_neg_RNA_COFF_",rna_cutoff,".rds"))
comp_table    = readRDS(paste0("comp_table_A_RNA_COFF_",rna_cutoff,".rds"))
lab_pos       = my_tibble_pos[which(my_tibble_pos$id %in% comp_table$pos_id),]
lab_neg       = my_tibble_neg[which(my_tibble_neg$id %in% comp_table$neg_id),]
merged_table = tibble(
id_pos  = numeric(),
cd4_pos = numeric(),
rna_pos = numeric(),
labdate_pos      = date(as.character()),
tb_test_date_pos = date(as.character()),
tb_test_pos      = numeric(),
tb_test_type_pos = numeric(),
sex_pos = numeric(),
eth_pos = numeric(),
s_id_pos      = as.character(),
center2_pos   = numeric(),
lab_stock_pos = numeric(),
id_neg  = numeric(),
cd4_neg = numeric(),
rna_neg = numeric(),
labdate_neg      = date(as.character()),
tb_test_date_neg = date(as.character()),
tb_test_neg      = numeric(),
tb_test_type_neg = numeric(),
sex_neg = numeric(),
eth_neg = numeric(),
s_id_neg      = as.character(),
center2_neg   = numeric(),
lab_stock_neg = numeric()
)
for (i in seq(1,dim(comp_table)[1])){
id_pos  = comp_table[i,]$pos_id;
id_neg  = comp_table[i,]$neg_id;
sex_pos = comp_table[i,]$pos_sex;
sex_neg = comp_table[i,]$neg_sex;
eth_pos = comp_table[i,]$pos_eth;
eth_neg = comp_table[i,]$neg_eth;
s_id_pos = comp_table[i,]$pos_s_id;
s_id_neg = comp_table[i,]$neg_s_id;
row_pos_lab = lab_pos[which(lab_pos$id==id_pos),];
row_neg_lab = lab_neg[which(lab_neg$id==id_neg),];
labdate_pos = row_pos_lab$labdate;
labdate_neg = row_neg_lab$labdate;
cd4_pos = row_pos_lab$cd4;
cd4_neg = row_neg_lab$cd4;
rna_pos = row_pos_lab$rna;
rna_neg = row_neg_lab$rna;
tb_test_date_pos = row_pos_lab$tb_test_date;
tb_test_date_neg = row_neg_lab$tb_test_date;
tb_test_pos      = row_pos_lab$tb_test;
tb_test_neg      = row_neg_lab$tb_test;
tb_test_type_pos = row_pos_lab$tb_test_type;
tb_test_type_neg = row_neg_lab$tb_test_type;
center2_pos      = row_pos_lab$center2;
center2_neg      = row_neg_lab$center2;
lab_stock_pos    = row_pos_lab$lab_stock;
lab_stock_neg    = row_neg_lab$lab_stock;
merged_table = merged_table %>% add_row(id_pos,cd4_pos,rna_pos,labdate_pos,tb_test_date_pos,
tb_test_pos,tb_test_type_pos,sex_pos,eth_pos,s_id_pos,center2_pos,lab_stock_pos,
id_neg,cd4_neg,rna_neg,labdate_neg,tb_test_date_neg,
tb_test_neg,tb_test_type_neg,sex_neg,eth_neg,s_id_neg,center2_neg,lab_stock_neg);
}
write_xlsx(merged_table,paste0("./MERGED_TABLE_A_RNA_COFF_",rna_cutoff,".xlsx"))
readRDS(paste0("comp_table_A_RNA_COFF_",rna_cutoff,".rds"))
